<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>css3中的animation属性</title>
      <link href="/2022/05/13/css3%E4%B8%AD%E7%9A%84animation%E5%B1%9E%E6%80%A7/"/>
      <url>/2022/05/13/css3%E4%B8%AD%E7%9A%84animation%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> </span></span><br><span class="line"><span class="language-css">          <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">100px</span>;<span class="attribute">background</span>:red;<span class="attribute">animation</span>:my <span class="number">5s</span>;&#125;</span></span><br><span class="line"><span class="language-css">          <span class="keyword">@keyframes</span> my</span></span><br><span class="line"><span class="language-css">         &#123;</span></span><br><span class="line"><span class="language-css">              <span class="number">0%</span>&#123;<span class="attribute">background</span>:red;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span></span><br><span class="line"><span class="language-css">              <span class="number">100%</span>&#123;<span class="attribute">background</span>:blue;<span class="attribute">width</span>:<span class="number">200px</span>;&#125;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="最常用的几种属性有以下几种："><a href="#最常用的几种属性有以下几种：" class="headerlink" title="最常用的几种属性有以下几种："></a>最常用的几种属性有以下几种：</h4><p>1、animation-name(动画名称)</p><p>animation-name属性是必须存在的，因为animation-name的值默认是none，没有动画。</p><p>2、animation-duration(动画执行一次所需时间)</p><p>animation-duration属性也是必须存在的，因为animation-duration的值默认是0，没有动画。</p><p>3、animation-delay(动画在开始前的延迟时间)</p><p>animation-delay的值可以是秒（s）或者是毫秒（ms）,默认值是0，没有延迟。</p><p>4、animation-timing-function(动画以何种运行轨迹完成一个周期)</p><p>animation-timing-function的值是贝塞尔曲线，默认值是ease,表示动画以低速开始，然后加速，最后在结束前变慢。 最常用的值有以下几个：</p><ul><li><p>linear:表示动画从头到尾的速度都是相同的。</p></li><li><p>ease-in:表示动画以低速开始。</p></li><li><p>ease-out:表示动画以低速结束。</p></li><li><p>ease-in-out:表示动画以低速开始和结束。</p></li></ul><p>如果没有想用的值，也可以直接使用三次贝塞尔函数，使用网站是<a href="http://cubic-bezier.com,可直接调试出自己想要的值;也可以在浏览器中直接调试,现在浏览器调试工具中都支持贝塞尔函数可视化调试./">http://cubic-bezier.com，可直接调试出自己想要的值；也可以在浏览器中直接调试，现在浏览器调试工具中都支持贝塞尔函数可视化调试。</a></p><p>5、animation-iteration-count(动画播放次数)</p><p>animation-iteration-count属性值有两种：</p><ul><li><p>直接写数字，自定义想要播放动画的次数。</p></li><li><p>infinite：设置动画无线循环播放。</p></li></ul><p>6、animation-fill-mode(定义元素动画结束以后或者未开始的元素样式) </p><p> 默认值为none，标示，不会在动画结束或者未开始时给元素 添加样式 </p><p>常用属性值为：</p><ul><li><p>forwards:表示动画结束后，元素直接接使用当前样式。</p></li><li><p>backwards:表示在动画延迟时间元素使用关键帧中from的属性值或者to属性值（当animation-direction为reverse或者alternate-reverse时）</p></li></ul><p>7、animation-direction(是否轮流反向播放动画)</p><p>默认值是normal，动画正常播放。如果动画只播放一次，则该属性无效。</p><p>常用的属性值为：</p><ul><li><p>reverse:表示动画反向播放。</p></li><li><p>alternate:表示动画在奇数次播放时为正向播放，为偶数次播放时为反向播放。</p></li><li><p>alternate-reverse: :表示动画在奇数次播放时为反向播放，为偶数次播放时为正向播放。</p></li></ul><p>animation属性在书写通常合并在一起，除非需要单独设置的属性值，animation属性的简写形式为：animation:code 2s 2s linear infinite alternate forwards;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>wordpress高级动作函数</title>
      <link href="/2022/05/13/wordpress%E9%AB%98%E7%BA%A7%E5%8A%A8%E4%BD%9C%E5%87%BD%E6%95%B0/"/>
      <url>/2022/05/13/wordpress%E9%AB%98%E7%BA%A7%E5%8A%A8%E4%BD%9C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>部分介绍的都是与WordPress查询（决定该显示哪一篇日志）、WordPress主循环、激活插件以及WordPress基础代码相关的动作函数。</p><p><strong>admin_menu</strong></p><p>控制板中的菜单结构显示无误后，执行此动作函数。</p><p><strong>admin_notices</strong></p><p>管理菜单显示在页面上时执行此动作函数。</p><p><strong>blog_privacy_selector</strong></p><p>博客默认隐私选项显示在页面上时，执行此动作函数。</p><p><strong>check_admin_referer</strong></p><p>系统出于安全考虑检查随机数后在默认函数check_admin_referrer中执行check_admin_referer动作钩子，使插件因安全原因而强制WordPress停止运行。注意：check_admin_referrer也是一个“插入式”函数，即插件可以改写该函数；参见插件API。</p><p><strong>check_ajax_referer</strong></p><p>系统从cookies中成功验证用户的登录名和密码后，在默认函数 check_ajax_referer（这是在有AJAX请求进入wp-admin&#x2F;admin-ajax.php脚本时所调用的函数）中执行此动作函数，使插件能够因安全原因强制WordPress停止运行。注意： check_ajax_referer函数也是一个“插入式”函数，即插件可以改写该函数；参见插件API。</p><p><strong>generate_rewrite_rules</strong></p><p>重写规则生成后，执行此动作函数。函数接收的参数：WP_Rewrite类变量列表。注意：在修改重写规则时，使用rewrite_rules_array过滤器函数比使用该动作函数更加方便。</p><p><strong>init</strong></p><p>WordPress加载完毕但尚未发送页眉信息时执行该动作函数。函数适用于解析$_GET or $_POST 触发器。</p><p><strong>oop_end</strong></p><p>WordPress主循环最后一篇日志执行完毕后，执行此动作函数。</p><p><strong>loop_start</strong></p><p>执行WordPress主循环第一篇日志前，执行此动作函数。</p><p><strong>parse_query</strong></p><p>在主查询或WP_Query 的任何实例（如 query_posts，get_posts或get_children）中查询解析结束时，执行此动作函数。函数接收的参数：$wp_query 对象内容列表。</p><p><strong>parse_request</strong></p><p>在主WordPress函数wp中解析查询请求后，执行该动作函数。函数接收的参数：引用全局变量$wp对象的数组。</p><p><strong>pre_get_posts</strong></p><p>在get_posts函数开始操作查询前执行此动作函数。函数接收的参数：$wp_query对象的内容列表。</p><p><strong>sanitize_comment_cookies</strong></p><p>HTTP请求读取cookies后执行此动作函数。</p><p><strong>send_headers</strong></p><p>在WordPress主函数wp中发送基本HTTP页眉后执行此动作函数。函数接收的参数：引用全局变量$wp对象的数组。</p><p><strong>shutdown</strong></p><p>页面内容输出完毕后执行此动作函数。</p><p><strong>wp</strong></p><p>在WordPress主函数wp中解析查询、页面加载完毕后，执行模板前，执行此动作函数。函数接收的参数：引用全局变量$wp对象的数组。</p>]]></content>
      
      
      <categories>
          
          <category> wordpress专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo theme Butterfly 报错</title>
      <link href="/2022/05/13/%E4%BD%BF%E7%94%A8hexo-theme-Butterfly-%E6%8A%A5%E9%94%99/"/>
      <url>/2022/05/13/%E4%BD%BF%E7%94%A8hexo-theme-Butterfly-%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>直接用github上作者提供的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master [https://github.com/jerryc127/hexo-theme-butterfly.git](https://github.com/jerryc127/hexo-theme-butterfly.git) themes/Butterfly</span><br></pre></td></tr></table></figure><p>结果是页面根本无法正常渲染，只有一行字：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</span><br></pre></td></tr></table></figure><h5 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h5><p>参照原作者提供的文章<a href="https://links.jianshu.com/go?to=https://docs.jerryc.me/%23/config/question">Butterfly</a></p><p>按照方法安装<code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code>然后打开</p>]]></content>
      
      
      <categories>
          
          <category> Hexo专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加分类和标签</title>
      <link href="/2022/05/12/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
      <url>/2022/05/12/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h5 id="1、创建“分类”选项"><a href="#1、创建“分类”选项" class="headerlink" title="1、创建“分类”选项"></a>1、创建“分类”选项</h5><h6 id="1-1-生成“分类”页并添加tpye属性"><a href="#1-1-生成“分类”页并添加tpye属性" class="headerlink" title="1.1 生成“分类”页并添加tpye属性"></a>1.1 生成“分类”页并添加tpye属性</h6><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page categories</span><br></pre></td></tr></table></figure><p>成功后会提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="title">title</span>: 文章分类</span><br><span class="line"><span class="title">date</span>: <span class="number">2022</span>-<span class="number">01</span>-<span class="number">07</span> <span class="number">22</span>:<span class="number">53</span>:<span class="number">43</span></span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure><p>添加<code>type: &quot;categories&quot; layout: &quot;categories&quot;</code>到内容中，添加后是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2022-01-07 22:53:43</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h5 id="1-2-给文章添加“categories”属性"><a href="#1-2-给文章添加“categories”属性" class="headerlink" title="1.2 给文章添加“categories”属性"></a>1.2 给文章添加“categories”属性</h5><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2022-01-07 22:53:43</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</p><h3 id="2、创建“标签”选项"><a href="#2、创建“标签”选项" class="headerlink" title="2、创建“标签”选项"></a>2、创建“标签”选项</h3><h4 id="2-1-生成“标签”页并添加tpye属性"><a href="#2-1-生成“标签”页并添加tpye属性" class="headerlink" title="2.1 生成“标签”页并添加tpye属性"></a>2.1 生成“标签”页并添加tpye属性</h4><p>打开命令行，进入博客所在文件夹。执行命令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>成功后会提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure><p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2022-01-07 22:53:43</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加<code>type: &quot;tags&quot; layout: &quot;tags&quot;</code>到内容中，添加后是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2022-01-07 22:53:43</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h4 id="2-2-给文章添加“tags”属性"><a href="#2-2-给文章添加“tags”属性" class="headerlink" title="2.2 给文章添加“tags”属性"></a>2.2 给文章添加“tags”属性</h4><p>打开需要添加标签的文章，为其添加tags属性。下方的<code>tags:</code>下方的<code>- jQuery</code> <code>- 表格</code><br><code>- 表单验证</code>就是这篇文章的标签了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2022-01-07 22:53:43</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">tags:</span><br><span class="line">- jQuery</span><br><span class="line">- 表格</span><br><span class="line">- 表单验证</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。</p><p>细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds&#x2F;post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。</p><p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wordpress开发api之钩子大全</title>
      <link href="/2022/05/11/wordpress%E5%BC%80%E5%8F%91api%E4%B9%8B%E9%92%A9%E5%AD%90%E5%A4%A7%E5%85%A8/"/>
      <url>/2022/05/11/wordpress%E5%BC%80%E5%8F%91api%E4%B9%8B%E9%92%A9%E5%AD%90%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文着重介绍了“钩子”的应用程序接口，这里的钩子又被称为“过滤器”和“动作”。WordPress通过钩子来运行插件。这些钩子也可以用在主题中，WordPress中插件开发人员可以使用的API（应用程序接口）钩子（hook）进行扩展开发</p></blockquote><h4 id="钩子，动作与过滤器"><a href="#钩子，动作与过滤器" class="headerlink" title="钩子，动作与过滤器"></a>钩子，动作与过滤器</h4><blockquote><p>WordPress用钩子将插件“勾进”WordPress系统中，让插件与WordPress相连接。也就是说，通过钩子，WordPress能够在特定时间内调用插件中的函数，让插件开始运行。下面是钩子的两种形式：</p></blockquote><blockquote><ol><li>动作（Actions）：在系统运行的某些特定时间点或发生特定事件时，WordPress核心程序会调用一些钩子。这里WordPress所调用的钩子被称为“动作”。插件用动作API来指定在上述特定时间点内需要执行的PHP函数。</li></ol></blockquote><blockquote><ol><li>过滤器（Filters）：WordPress将不同类型文本添加到数据库或发送给浏览器窗口前，需要调用一些钩子来修改上述不同类型文本。这里WordPress所调用的钩子被称为“过滤器”。通过使用滤器API，插件可以执行一个或多个PHP函数以修改上述不同类型文本。</li></ol></blockquote><blockquote><p>有时我们可以直接通过动作或过滤器实现以上效果。例如，如果我们希望用插件来改变某篇日志内容，可以为publish_post添加一个动作函数（保存到数据库时修改日志），也可以为the_content添加一个过滤器函数（显示到浏览器窗口时修改日志）。</p></blockquote><h4 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h4><p><strong>过滤器函数</strong></p><ul><li>has_filters</li><li>add_filter()</li><li>apply_filters()</li><li>current_filter</li><li>merge_filters()</li><li>remove_filter()</li><li>remove_all_filters</li></ul><p><strong>动作函数</strong></p><ul><li>has_action</li><li>add_action</li><li>do_action</li><li>do_action_ref_array</li><li>did_action</li><li>remove_action</li><li>remove_all_actions</li></ul><p><strong>动作</strong></p><p>动作由发生在WordPress中的特定事件触发，如发表日志、更改主题、显示控制板页面等。插件以执行PHP函数的方式来响应该事件，函数的作用可能是：</p><p>更改数据库资料<br>发送电子邮件消息<br>更改浏览器窗口上显示的信息（网站管理员或终端用户）<br>基本步骤如下（下文中有详细介绍）：</p><ol><li>在插件文件中创建一个可以在事件发生时执行的PHP函数</li><li>调用add_action，将动作函数勾入WordPress</li><li>将创建的PHP函数存放在插件文件中，激活该函数</li></ol><p><strong>创建动作函数</strong></p><p>要在插件中新建一个动作函数，首先要用插件中该动作的功能来创建一个PHP函数，然后将函数存入插件文件（我们需要将插件文件放在wp-content&#x2F;plugins目录下）。例如，如果我们希望每次我们发表新日志，博客都会以电子邮件的方式通知我们的朋友，我们可以定义以下函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">email_friends</span>(<span class="params">$post_ID</span>)  &#123;</span><br><span class="line">    $friends = <span class="string">&#x27;bob@example.org,susie@example.org&#x27;</span>;</span><br><span class="line">    <span class="title function_">mail</span>($friends, <span class="string">&quot;sally&#x27;s blog updated&quot;</span>, </span><br><span class="line">      <span class="string">&#x27;I just put something on my blog: http://blog.example.com&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> $post_ID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大多数动作函数都能接受一个参数（通常是日志ID或评论ID，取决于动作的性质）。有些动作函数能接收更多参数——更多信息请参照动作的说明文档或WordPress源代码。除参数外，我们也可以获取WordPress的全局变量，调用其它WordPress函数（或插件文件中的函数）。</p><p>函数输出的内容会出现在调用动作的页面源代码中。</p><p>注意：其它插件或WordPress核心文件中的函数可能已经使用了我们所创建的函数名称。</p><h2 id="勾入WordPress（连接到WordPress程序中）"><a href="#勾入WordPress（连接到WordPress程序中）" class="headerlink" title="勾入WordPress（连接到WordPress程序中）"></a><strong>勾入WordPress（连接到WordPress程序中）</strong></h2><p>定义PHP函数后，我们要将函数连接到WordPress中。可以在插件文件的全局变量执行域中调用add_action来实现连接：</p><p><strong>add_action ( ‘hook_name’, ‘your_function_name’, [priority], [accepted_args] );</strong><br>其中：</p><p><strong>hook_name</strong></p><p>WordPress动作钩子的名称，通过名称我们可以了解到函数与什么事件相关联。</p><p><strong>your_function_name</strong></p><p>hook_name指定事件后，需要执行的函数名。函数需要是WordPress核心文件中的标准PHP函数，或是我们在插件文件中定义的函数（如上文中定义的’email_friends’）。</p><p><strong>priority</strong></p><p>用一个可选的整数型变量来规定函数（与特定动作相关联）的执行顺序，变量值默认为10。若某函数的priority值小于10，优先执行该函数。如果若干函数priority值相等，则按加入动作的顺序执行函数。</p><p><strong>accept_args</strong></p><p>用一个可选的整数型变量来定义函数能够接受的参数数量（默认值为1）。有些钩子能够向函数传递一个以上参数，因此accept_args实用价值较大。参数引进于WordPress 1.5.1。</p><p>根据上面的例子，我们要在插件文件中加入以下代码行：</p><p><strong>add_action ( ‘publish_post’, ‘email_friends’ );</strong><br>同样，我们也可以删除动作钩子中的动作。</p><p><strong>安装与激活</strong></p><p>最后我们要安装文件、激活插件以运行动作钩子。我们要将创建的PHP函数和add_filter调用存入一个PHP文件并将该PHP文件安装在wp-content&#x2F;plugins目录下。安装完毕后，在WordPress的管理界面中激活插件；参见管理插件。</p><p><strong>当前动作钩子</strong></p><p>插件API&#x2F;常用动作（action）中列出了WordPress现有动作钩子以及之前WordPress版本的链接。</p><p><strong>过滤器（Filters）</strong></p><p>过滤器是WordPres在运行中的特定时间点、对数据进行操作（如将数据加入数据库，或将数据发送到浏览器窗口上）前，用来传递数据的函数。WordPress生成页面时，过滤器位于数据库和浏览器之间；当WordPress将新日志和评论加入到数据库中时，过滤器位于浏览器和数据库之间。WordPress中大多数输入和输出内容都至少经过一个过滤器的传递。默认情况下WordPress会执行一些过滤行为，但插件也可以添加自己的过滤器函数。</p><p>将过滤器函数加入WordPress的基本步骤如下（下文中有详细描述）：</p><ol><li>创建一个可以过滤数据的PHP函数</li><li>调用add_filter()，将过滤器函数勾入WordPress</li><li>将创建的PHP函数存放在插件文件中，激活该函数</li></ol><p><strong>创建过滤器函数</strong></p><p>过滤器函数将未经修改的数据作为输入内容，返回修改后的数据（有时会返回空值来表示该数据应该被删除或忽略）。如果过滤器函数没有对数据做修改，则应该返回原始数据，方便插件必要时修改数据值。</p><p>因此要在插件中新建一个过滤器函数，首先要创建一个PHP函数负责过滤，然后将该PHP函数存入插件文件（插件文件必须位于wp-content&#x2F;plugins目录下）。例如，如果希望我们的日志和评论中没有亵渎性语言，我们需要定义一个全局变量，列出所有不允许出现的词语，然后创建PHP函数：</p><p><code>function filter_profanity($content) &#123; global $profanities; $content=str_ireplace($profanities,&#39;&#123;censored&#125;&#39;,$content); return $content; &#125;</code><br>为什么这里不用循环也可以？这是因为$profanities是一个数组，str_replace可以帮我们循环该数组。</p><p>注意：其它插件或WordPress核心文件中的函数可能已经使用了我们所创建的函数名称。</p><p><strong>将过滤器勾入WordPress（连接到WordPress程序中）</strong></p><p>定义PHP函数后，我们要将过滤器函数连接到WordPress中。可以在插件文件的全局变量执行域中调用add_filter来实现连接：</p><p><strong>add_filter ( ‘hook_name’, ‘your_filter’, [priority], [accepted_args] );</strong><br>其中：</p><p><strong>hook_name</strong></p><p>WordPress过滤器钩子的名称，通过名称我们可以了解到什么时候需要用到过滤器函数。</p><p><strong>your_function_name</strong></p><p>用于过滤的函数的名称。函数需要是WordPress核心文件中的标准PHP函数，或是我们在插件文件中定义的函数。</p><p><strong>priority</strong></p><p>用一个可选的整数型变量来规定函数（该函数与特定过滤器相关联）的执行顺序，变量值默认为10。若某函数的priority值小于10，优先执行该函数。如果若干函数priority值相等，则按加入过滤器的顺序执行函数。</p><p><strong>accept_args</strong></p><p>用一个可选的整数型变量来定义函数能够接受的参数数量（默认值为1）。有些钩子能够向函数传递一个以上参数，因此accept_args实用价值较大。</p><p>根据上面的例子，我们要在插件文件的主执行区域中加入以下代码行，让WordPress过滤含有亵渎性内容的评论：</p><p><strong>add_filter(‘comment_text’,’filter_profanity’);</strong></p><p>我们也可以用remove_filter()删除过滤器钩子中的过滤器函数。</p><p><strong>安装与激活</strong></p><p>最后我们要安装文件、激活插件以运行过滤器钩子。我们要将创建的PHP函数和add_filter调用存入一个PHP文件并且将该PHP文件安装在wp-content&#x2F;plugins目录下。安装完毕后，在WordPress的管理界面中激活插件；参见管理插件。</p><p><strong>当前过滤器钩子</strong></p><p>插件API&#x2F;常用动作（action）中列出了WordPress现有过滤器钩子以及之前WordPress版本的链接。</p><p><strong>示例</strong></p><p>这是wp-hackers邮件列表中的一个示例。该示例用一个插件来更改（或重写）默认的bloginfo()函数。这将会修改核心函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add_filter</span>(<span class="string">&#x27;bloginfo&#x27;</span>, <span class="string">&#x27;mybloginfo&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="title function_">add_filter</span>(<span class="string">&#x27;bloginfo_url&#x27;</span>, <span class="string">&#x27;mybloginfo&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mybloginfo</span>(<span class="params">$result=<span class="string">&#x27;&#x27;</span>, $show=<span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> ($show) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;wpurl&#x27;</span>:</span><br><span class="line">                $result = <span class="variable constant_">SITE_URL</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;template_directory&#x27;</span>:</span><br><span class="line">                $result = <span class="variable constant_">TEMPL_DIR</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>: </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除动作和过滤器</strong></p><p>有时我们可能会希望插件禁用WordPress内置的、或者其它插件创建的某个动作或过滤器。这时可以调用remove_filter(‘filter_hook’,’filter_function’)或remove_action(‘action_hook’,’action_function’)帮助我们达到期望的效果。</p><p>例如发表新日志时，用remove_action(‘publish_post’,’generic_ping’); 可以阻止博客发送ping。</p><p>注意，如果钩子优先级的值不是10，那么我们必须在调用remove_action时指定优先级。一般来说，除非我们完全了解所要删除的信息以及信息的作用，否则不能随意删除任何信息——可以查看WordPress源代码或者其它插件源代码以了解信息。</p><p><strong>可插入式函数</strong></p><p>除了上面介绍的钩子（动作和过滤器），我们还可以通过重写WordPress函数来让插件影响WordPress的运行。事实上，WordPress为插件提供了一个能够重新定义的小型函数集。函数集中的函数被称为可插入式函数，存储在wp-includes&#x2F;pluggable.php下。如果所有插件都加载完毕后，可插入式函数仍然处于未定义状态，这时WordPress会加载这些函数。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
